cmake_minimum_required(VERSION 3.20)

if(WIN32)
	set(GLSL_CRUSHER_OS "windows")
	set(GLSL_CRUSHER_SUFFIX ".exe")
elseif(UNIX AND NOT APPLE)
	set(GLSL_CRUSHER_OS "linux")
	set(GLSL_CRUSHER_SUFFIX "")
else()
	message(FATAL_ERROR "Unsupported OS for GLSL Crusher")
endif()

include(CheckCXXCompilerFlag)
string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" SYS_ARCH)

if(SYS_ARCH MATCHES "^(x86_64|amd64)$")
	set(GLSL_CRUSHER_ARCH "x64")
elseif(SYS_ARCH MATCHES "^(i[3-6]86|x86)$")
	set(GLSL_CRUSHER_ARCH "x86")
elseif(SYS_ARCH MATCHES "^(aarch64|arm64)$")
	set(GLSL_CRUSHER_ARCH "arm64")
else()
	message(FATAL_ERROR "Unsupported architecture: ${SYS_ARCH}")
endif()

if(CMAKE_C_COMPILER_ID MATCHES "Clang")
	set(GLSL_CRUSHER_COMPILER "clang")
elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU")
	set(GLSL_CRUSHER_COMPILER "gcc")
elseif(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
	set(GLSL_CRUSHER_COMPILER "cl")
else()
	# Fallback
	if(GLSL_CRUSHER_OS STREQUAL "linux")
		set(GLSL_CRUSHER_COMPILER "clang")
	elseif(GLSL_CRUSHER_OS STREQUAL "windows")
		set(GLSL_CRUSHER_COMPILER "cl")
	endif()
endif()

set(GLSL_CRUSHER_FILENAME "GLSLCrusher-${GLSL_CRUSHER_OS}-${GLSL_CRUSHER_COMPILER}-${GLSL_CRUSHER_ARCH}${GLSL_CRUSHER_SUFFIX}")
set(GLSL_CRUSHER_URL "https://github.com/angerenage/GLSL-Crusher/releases/latest/download/${GLSL_CRUSHER_FILENAME}")
set(GLSL_CRUSHER_SHA_URL "https://github.com/angerenage/GLSL-Crusher/releases/latest/download/SHA256SUMS.txt")
set(GLSL_CRUSHER_DEST "${CMAKE_BINARY_DIR}/tools/${GLSL_CRUSHER_FILENAME}")

file(DOWNLOAD ${GLSL_CRUSHER_SHA_URL} "${CMAKE_BINARY_DIR}/SHA256SUMS.txt" SHOW_PROGRESS STATUS status)
list(GET status 0 status_code)
if(NOT status_code EQUAL 0)
	message(FATAL_ERROR "Failed to download SHA256SUMS.txt")
endif()

file(READ "${CMAKE_BINARY_DIR}/SHA256SUMS.txt" sha_file)

set(hash_pattern "")
foreach(i RANGE 1 64)
	string(APPEND hash_pattern "[0-9a-f]")
endforeach()

string(REPLACE "." "\\." escaped_filename "${GLSL_CRUSHER_FILENAME}")
string(REPLACE "-" "\\-" escaped_filename "${escaped_filename}")
string(REGEX MATCHALL "${hash_pattern}[ \\t]+${escaped_filename}" match_line "${sha_file}")
if(NOT match_line)
	message(FATAL_ERROR "Could not extract hash from SHA256SUMS.txt for ${GLSL_CRUSHER_FILENAME}")
endif()
string(REGEX MATCH "${hash_pattern}" expected_hash "${match_line}")

file(DOWNLOAD ${GLSL_CRUSHER_URL} ${GLSL_CRUSHER_DEST} SHOW_PROGRESS STATUS download_status)
list(GET download_status 0 download_code)
if(NOT download_code EQUAL 0)
	message(FATAL_ERROR "Failed to download ${GLSL_CRUSHER_FILENAME}")
endif()

file(SHA256 ${GLSL_CRUSHER_DEST} actual_hash)
if(NOT "${expected_hash}" STREQUAL "${actual_hash}")
	message(FATAL_ERROR "Hash mismatch: expected ${expected_hash}, got ${actual_hash}")
endif()

set(GLSL_CRUSHER_EXECUTABLE "${GLSL_CRUSHER_DEST}")
